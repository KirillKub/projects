{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./piskel-clone/tools/size.js","webpack:///./piskel-clone/tools/chooseColor.js","webpack:///./piskel-clone/frames/create.js","webpack:///./piskel-clone/color/rgbToHex.js","webpack:///./piskel-clone/canvas/clear.js","webpack:///./piskel-clone/tools/active.js","webpack:///./piskel-clone/frames/animation.js","webpack:///./piskel-clone/index.js","webpack:///./piskel-clone/tools/checkKeys.js","webpack:///./piskel-clone/canvas/paintBucket.js","webpack:///./piskel-clone/frames/GIFEncoder.js","webpack:///./piskel-clone/frames/LZWEncoder.js","webpack:///./piskel-clone/frames/NeuQuant.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","colorHelp","ctx1","canvasSize","swapSize","size","canvas","height","width","document","getElementById","classList","remove","add","makeActiveSize","dataURL","localStorage","getItem","img","Image","crossOrigin","src","onload","drawImage","rgbToHex","str","rgbElements","slice","length","split","toString","frameBox","createFrame","canvas1","createElement","getContext","push","canvasData","div","button","button2","textContent","style","appendChild","append","drawFrame","ctxValue","clearCanvas","clearRect","fillStyle","fillRect","setItem","toDataURL","makeActiveTool","count","animation","ctx","isBucket","isPencil","isDraw","isPaintBucket","isChooseColor","isEraser","isStroke","isEraserDraw","imageSmoothingEnabled","strokeStyle","posX","posY","addEventListener","event","target","id","element","closest","className","beginPath","x","offsetX","y","offsetY","moveTo","parseInt","lineTo","stroke","code","colorPixel","getImageData","data","rgb","console","log","colorNow","contains","chooseColor","pixels","pixelMeet","pixel","pop","xNow","yNow","colorPixel2","paintBucket","isStrokeDown","splice","filter","item","previousSibling","display","getElementsByTagName","color","fullBucket","fps","interval","animate","setInterval","clearInterval","fullscreenEnabled","requestFullscreen","alert","encoder","GIFEncoder","setRepeat","setDelay","start","addFrame","finish","download","window","onunload","chr","String","fromCharCode","ByteArray","this","bin","getData","v","writeByte","val","writeUTFBytes","string","charCodeAt","writeBytes","array","offset","transIndex","out","image","indexedPixels","colorDepth","colorTab","transparent","repeat","delay","started","usedEntry","palSize","dispose","closeStream","firstFrame","sizeSet","sample","comment","reset","ms","Math","round","setDispose","iter","setTransparent","setComment","im","is_imageData","Error","ok","ImageData","sizeset","setSize","Uint8ClampedArray","getImagePixels","analyzePixels","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeCommentExt","writeImageDesc","writePixels","e","filename","undefined","endsWith","templink","href","URL","createObjectURL","Blob","Uint8Array","type","click","setFrameRate","setQuality","quality","w","h","cont","len","nPix","nq","NeuQuant","process","k","j","index","map","findClosest","g","b","minpos","dmin","dr","dg","db","transp","disp","WriteShort","pValue","LZWEncoder","encode","stream","setProperties","has_start","is_first","imgW","imgH","pixAry","initCodeSize","remaining","curPixel","n_bits","maxcode","g_init_bits","ClearCode","EOFCode","a_count","EOF","BITS","HSIZE","maxbits","maxmaxcode","htab","codetab","hsize","free_ent","clear_flg","cur_accum","cur_bits","masks","accum","color_depth","max","char_out","outs","flush_char","cl_block","cl_hash","output","compress","init_bits","fcode","ent","hsize_reg","hshift","MAXCODE","nextPixel","outer_loop","os","apply","arguments","alphadec","thepicture","lengthcount","samplefac","network","netsize","prime1","prime2","prime3","prime4","minpicturebytes","maxnetpos","netbiasshift","ncycles","intbiasshift","intbias","gammashift","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","radbiasshift","radbias","alpharadbshift","alpharadbias","netindex","bias","freq","radpower","thepic","Array","colorMap","inxbuild","smallpos","smallval","q","previouscol","startpos","learn","radius","rad","alpha","step","delta","samplepixels","pix","lim","contest","altersingle","alterneigh","unbiasnet","dist","a","bestd","best","lo","hi","biasdist","betafreq","bestpos","bestbiaspos","bestbiasd"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {ctx} from '../index'\r\n\r\nlet canvasSize = 128;\r\n\r\nfunction swapSize(size){\r\n    canvasSize = size;\r\n    canvas.height = size;\r\n    canvas.width = size;\r\n    makeActiveSize(size);\r\n    const dataURL = localStorage.getItem('canvas');\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.src = dataURL;\r\n    img.onload = function load() {\r\n      ctx.drawImage(img, 0, 0, 512 / (512 / canvasSize), 512 / (512 / canvasSize));\r\n    };\r\n  }\r\n\r\n  function makeActiveSize(size){\r\n    document.getElementById('size32').classList.remove('active');\r\n    document.getElementById('size64').classList.remove('active');\r\n    document.getElementById('size128').classList.remove('active');\r\n    document.getElementById(`size${size}`).classList.add('active');\r\n  }\r\n  export { swapSize,canvasSize,makeActiveSize }","import {rgbToHex } from '../color/rgbToHex'\r\nimport { ctx, color } from '../index'\r\nimport { canvasSize } from './size'\r\n\r\n\r\nlet colorHelp;\r\nfunction chooseColor(event){\r\n      const x = event.offsetX;\r\n      const y = event.offsetY;\r\n      const colorPixel = ctx.getImageData(x / (parseInt(canvas.style.width, 10) / canvasSize),\r\n        y / (parseInt(canvas.style.height, 10) / canvasSize), 1, 1).data;\r\n      const rgb = `rgb(${colorPixel[0]}, ${colorPixel[1]}, ${colorPixel[2]})`;\r\n      console.log(colorPixel)\r\n      let colorNow = rgbToHex(rgb); \r\n      if(document.getElementById('primaryColor').classList.contains('active'))\r\n        document.getElementById('inputColorPrimary').value = colorNow;\r\n      else document.getElementById('inputColorSecondary').value = colorNow;   \r\n      colorHelp = colorNow;\r\n}\r\n\r\n\r\nexport { chooseColor, colorHelp } ","import {ctxValue,canvasData} from '../index';\r\n\r\nlet ctx1;\r\nlet frameBox = [];\r\nfunction createFrame(){\r\n    let canvas1 = document.createElement('canvas');\r\n    ctx1 = canvas1.getContext('2d');\r\n    frameBox.push(canvas1);\r\n    if(canvasData) ctx1 = canvasData;\r\n    let div = document.createElement('div');\r\n    let button = document.createElement('button');\r\n    let button2 = document.createElement('button');\r\n    div.classList.add('frame');\r\n    button.textContent = 'duplicate'\r\n    button.classList.add('duplicate')\r\n    button2.textContent = 'delete'\r\n    button2.classList.add('delete')\r\n    // if(frameBox.length > 1) frameBox.map(item => item.classList.remove('activeFrame'))\r\n    // canvas1.classList.add('activeFrame');\r\n    canvas1.style.width = '128px';\r\n    canvas1.style.height = '128px';\r\n    canvas1.width = '128';\r\n    canvas1.height = '128';\r\n    div.appendChild(canvas1);\r\n    div.appendChild(button);\r\n    div.appendChild(button2);\r\n    document.getElementById('addFrames').append(div);\r\n}\r\n\r\nfunction drawFrame(){\r\n    if(ctxValue) ctx1 = ctxValue;\r\n    const dataURL = localStorage.getItem('canvas');\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.src = dataURL;\r\n    ctx1.drawImage(img, 0, 0,128,128);\r\n}\r\n\r\nexport {createFrame,drawFrame,ctx1,frameBox}","function rgbToHex(str) {\r\n    let rgbElements = str.slice(4, str.length - 1);\r\n    rgbElements = rgbElements.split(', ');\r\n    return `#${((1 << 24) + (+rgbElements[0] << 16) + (+rgbElements[1] << 8) + +rgbElements[2]).toString(16).slice(1)}`;\r\n  }\r\n\r\n  \r\n  export { rgbToHex }","import {ctx,} from '../index'\r\nimport {drawFrame,ctx1} from '../frames/create'\r\n\r\nfunction clearCanvas(){\r\n    ctx.clearRect(0,0,512,512);\r\n    ctx1.clearRect(0,0,128,128);\r\n    ctx.fillStyle = 'lightgrey';\r\n    ctx.fillRect(0,0,512,512);\r\n    localStorage.setItem('canvas', canvas.toDataURL());\r\n}\r\n\r\nexport { clearCanvas }","function makeActiveTool(name){\r\n    document.getElementById('pencil').classList.remove('active');\r\n    document.getElementById('paintBucket').classList.remove('active');\r\n    document.getElementById('chooseColor').classList.remove('active');\r\n    document.getElementById('eraser').classList.remove('active');\r\n    document.getElementById('stroke').classList.remove('active');\r\n    document.getElementById('bucket').classList.remove('active');\r\n    document.getElementById(`${name}`).classList.add('active');\r\n  }\r\n\r\n  export{makeActiveTool}","import {frameBox } from '../frames/create'\r\n\r\nlet count = 0;\r\nfunction animation(){\r\n    const canvas = document.getElementById('animation');\r\n    const ctx = canvas.getContext('2d');\r\n    const dataURL = frameBox[count].toDataURL()\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.src = dataURL;\r\n    img.onload = function load() {\r\n    ctx.drawImage(img, 0, 0, 256, 256);\r\n    count += 1;\r\n    if(count === frameBox.length) {\r\n      count = 0\r\n    }\r\n  }\r\n}\r\n\r\nfunction fullScreen()\r\n{\r\n  if(\"fullscreenEnabled\" in document) {\r\n    if(document.fullscreenEnabled) {\r\n      let element = document.getElementById(\"animation\");\r\n      if(\"requestFullscreen\" in element) {\r\n        element.requestFullscreen();\r\n        }\r\n      }\r\n    }\r\n  else {\r\n    alert(\"User doesn't allow full screen\");\r\n  }\r\n}\r\n\r\nexport { animation, fullScreen }","import { pressKeys } from './tools/checkKeys'\nimport { swapSize, canvasSize, makeActiveSize } from './tools/size'\nimport { paintBucket , fullBucket } from './canvas/paintBucket'\nimport { chooseColor,colorHelp } from './tools/chooseColor'\nimport { clearCanvas } from './canvas/clear'\nimport { makeActiveTool} from './tools/active'\nimport {createFrame,drawFrame,frameBox} from './frames/create';\nimport { animation, fullScreen} from './frames/animation'\nimport { } from './frames/GIFEncoder'\nimport { } from './frames/LZWEncoder'\nimport { } from './frames/NeuQuant'\n\nlet canvasData;\nlet ctxValue;\nlet isBucket = false;\nlet isPencil = false;\nlet isDraw = false;\nlet isPaintBucket = false;\nlet isChooseColor = false;\nlet isEraser = false;\nlet isStroke = false;\nlet isEraserDraw = false;\nlet color = '#ff0000';\nconst canvas = document.getElementById('canvas');\ncanvas.style.width = '512px';\ncanvas.style.height = '512px';\nconst ctx = canvas.getContext('2d');\nctx.imageSmoothingEnabled = false;\ncreateFrame()\ndrawFrame()\n\nif (localStorage.getItem('canvas')) {\n  const dataURL = localStorage.getItem('canvas');\n  const img = new Image();\n  img.crossOrigin = 'Anonymous';\n  img.src = dataURL;\n  img.onload = function load() {\n    ctx.strokeStyle = color;\n    ctx.drawImage(img, 0, 0, 128, 128);\n  };\n}\n\ndocument.getElementById('size').addEventListener('click', (event) => {\n  const { target } = event;\n  if (target.id === 'size32') {\n    swapSize(32)\n  }\n  if (target.id === 'size64') {\n    swapSize(64)\n  }\n  if (target.id === 'size128') {\n    swapSize(128)\n  }\n});\n\ndocument.getElementById('mainItems').addEventListener('click', (event) => {\n  isPencil = false;\n  isChooseColor = false;\n  isPaintBucket = false;\n  isEraser = false;\n  isStroke = false;\n  isBucket = false;\n  const { target } = event;\n  const element = target.closest('div');\n  if (element.className === 'main__items') { return; }\n  if (element.id === 'pencil') {\n    makeActiveTool('pencil')\n    isPencil = true;\n  }\n  if (element.id === 'paintBucket') {\n    makeActiveTool('paintBucket')\n    isPaintBucket = true;\n  }\n  if (element.id === 'chooseColor') {\n    makeActiveTool('chooseColor')\n    isChooseColor = true;\n  }\n  if (element.id === 'eraser') {\n    makeActiveTool('eraser')\n    isEraser = true;\n  }\n  if (element.id === 'stroke') {\n    makeActiveTool('stroke')\n    isStroke = true;\n  }\n  if (element.id === 'bucket') {\n    makeActiveTool('bucket')\n    isBucket = true;\n  }\n});\n\ndocument.getElementById('canvas').addEventListener('mousedown', (event) => {\n  if (isPencil) {\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    const x = event.offsetX;\n    const y = event.offsetY;\n    ctx.moveTo(parseInt(x / (512 / canvasSize)), parseInt(y / (512 / canvasSize)));\n    isDraw = true;\n  }\n});\n\ndocument.getElementById('canvas').addEventListener('mousemove', (event) => {\n  if (isDraw) {\n    const x = event.offsetX;\n    const y = event.offsetY;\n    ctx.lineTo(parseInt(x / (512 / canvasSize)), parseInt(y / (512 / canvasSize)))\n    ctx.stroke();\n  }\n});\n\n\ndocument.getElementById('canvas').addEventListener('mouseup', () => {\n  isDraw = false;\n  localStorage.setItem('canvas', canvas.toDataURL());\n});\n\ndocument.getElementById('canvas').addEventListener('mousemove', () => {\n  drawFrame()\n  ctxValue = null;\n  localStorage.setItem('canvas', canvas.toDataURL());\n});\n\ndocument.getElementById('canvas').addEventListener('mouseleave', () => {\n  isDraw = false;\n  localStorage.setItem('canvas', canvas.toDataURL());\n});\n\ndocument.getElementById('canvas').addEventListener('mousedown', (event) => {\n  if (isPencil) {\n    const x = event.offsetX;\n    const y = event.offsetY;\n    ctx.strokeStyle = color;\n    ctx.fillStyle = color;\n    ctx.fillRect(parseInt(x / (512 / canvasSize)), parseInt(y / (512 / canvasSize)), 1, 1);\n    localStorage.setItem('canvas', canvas.toDataURL());\n  }\n});\n\ndocument.addEventListener('keydown', pressKeys);\n\ndocument.getElementById('clear').addEventListener('click', clearCanvas)\n\ndocument.getElementById('mainColors').addEventListener('click', (event) => {\n  const { target } = event;\n  const element = target.closest('div');\n  if (element.className === 'main__colors') {\n    return;\n  }\n  element.classList.add('active');\n  if(element.id === 'primaryColor'){\n    document.getElementById('secondaryColor').classList.remove('active');\n    color = document.getElementById('inputColorPrimary').value;\n  }\n  if(element.id === 'secondaryColor'){\n    document.getElementById('primaryColor').classList.remove('active');\n    color = document.getElementById('inputColorSecondary').value;\n  }\n});\n\ndocument.getElementById('canvas').addEventListener('click', (event) => {\n  if (isChooseColor) {\n    chooseColor(event);\n    color = colorHelp;\n  }\n});\n\ndocument.getElementById('inputColorPrimary').addEventListener('input', () => {\n  color = document.getElementById('inputColorPrimary').value;\n});\n\ndocument.getElementById('inputColorSecondary').addEventListener('input', () => {\n  color = document.getElementById('inputColorSecondary').value;\n})\n\ndocument.getElementById('canvas').addEventListener('click', (event) => {\n  if (isPaintBucket) {\n    paintBucket(event);\n  }\n});\n\ndocument.getElementById('canvas').addEventListener('mousedown', (event) => {\n  if (isEraser) {\n    isEraserDraw = true;\n  }\n});\n\ndocument.getElementById('canvas').addEventListener('mousemove', (event) => {\n  const x = event.offsetX;\n  const y = event.offsetY;\n  if (isEraserDraw) {\n    ctx.clearRect(parseInt(x / (512 / canvasSize)), parseInt(y / (512 / canvasSize)), 1, 1);\n    localStorage.setItem('canvas', canvas.toDataURL());\n    drawFrame()\n  }\n})\n\ndocument.getElementById('canvas').addEventListener('mouseup', () => {\n  isEraserDraw = false;\n});\n\ndocument.getElementById('canvas').addEventListener('mouseleave', () => {\n  isEraserDraw = false;\n});\n\nlet posX;\nlet posY;\nlet isStrokeDown = false;\ndocument.getElementById('canvas').addEventListener('mousedown',(event)=>{\n  if(isStroke){\n    posX = event.offsetX;\n    posY = event.offsetY;\n    isStrokeDown = true;\n  }\n})\n\ndocument.getElementById('canvas').addEventListener('mousemove',(event)=>{\n  const x = event.offsetX;\n  const y = event.offsetY;\n  if(isStrokeDown) {\n      ctx.strokeStyle = color;\n      ctx.clearRect(0,0,canvas.width,canvas.height);\n      const dataURL = localStorage.getItem('canvas');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous';\n      img.src = dataURL;\n      ctx.drawImage(img, 0, 0, canvasSize, canvasSize);\n      ctx.beginPath();\n      ctx.moveTo(parseInt(posX / (512 / canvasSize)),parseInt((posY / (512 / canvasSize))));\n      ctx.lineTo(parseInt(x / (512 / canvasSize)), parseInt((y / (512 / canvasSize))));\n      ctx.stroke();\n  }\n});\n\ndocument.getElementById('canvas').addEventListener('mouseup',(event)=>{\n  if(isStroke){\n    isStrokeDown = false;\n  }\n})\n\ndocument.getElementById('addNewFrame').addEventListener('click',()=>{\n  createFrame();\n  clearCanvas();\n  localStorage.setItem('canvas', canvas.toDataURL());\n});\n\ndocument.getElementById('addFrames').addEventListener('click', (event)=>{\n  let target = event.target;\n  if(target.closest('canvas')){\n    ctxValue = target.getContext('2d');\n    const dataURL = target.toDataURL()\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = dataURL;\n    img.onload = function load() {\n      ctx.drawImage(img, 0, 0, 128, 128);\n    };\n  }\n})\n\ndocument.getElementById('addFrames').addEventListener('click',(event)=>{\n  let target = event.target\n  if(target.classList.contains('delete')){\n    frameBox.splice(frameBox.filter(item => item.getContext('2d') === target.previousSibling.previousSibling.getContext('2d')),1);\n    target.closest('.frame').style.display = 'none'\n    const dataURL = document.getElementsByTagName('canvas')[0].toDataURL();\n    ctxValue = document.getElementsByTagName('canvas')[0].getContext('2d');\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = dataURL;\n    img.onload = function load() {\n      ctx.strokeStyle = color;\n      ctx.drawImage(img, 0, 0, 128, 128);\n    };\n    drawFrame()\n  }\n  if(target.classList.contains('duplicate')){\n    createFrame()\n    const dataURL = target.previousSibling.toDataURL()\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = dataURL;\n    img.onload = function load() {\n      ctx.strokeStyle = color;\n      ctx.drawImage(img, 0, 0, 128, 128);\n    };\n    localStorage.setItem('canvas', canvas.toDataURL());\n    drawFrame()\n    ctxValue = null;\n    canvasData = null;\n  }\n});\n\ndocument.getElementById('canvas').addEventListener('mousedown',()=>{\n  if(isBucket){\n    fullBucket(color);\n    drawFrame();\n  }\n})\nlet fps = 12;\ndocument.getElementById('value').value = `12 fps`;\nlet interval = 1000 / fps;\nlet animate = setInterval(animation,interval);\n\ndocument.getElementById('range').addEventListener('input',()=>{\n  document.getElementById('value').value = `${document.getElementById('range').value} fps`;\n  fps = document.getElementById('range').value;\n  interval = 1000 / fps;\n  clearInterval(animate);\n  if(fps != 0){\n    animate = setInterval(animation,interval);\n  }\n})\n\ndocument.getElementById('animation').addEventListener('click',fullScreen)\n\ndocument.getElementById('gif').addEventListener('click',()=>{\n  let encoder = new GIFEncoder();\n  encoder.setRepeat(0);\n  encoder.setDelay(interval);\n  encoder.start();\n  for(let i = 0; i < frameBox.length; i++){\n      encoder.addFrame(frameBox[i].getContext('2d'));\n  }\n  encoder.finish();\n  encoder.download(\"picture.gif\");\n})\n\nwindow.onunload = () => {\n  localStorage.setItem('canvas', canvas.toDataURL());\n};\n\nexport {color, ctx, ctxValue,canvasData}","function pressKeys(event) {\r\n    if (event.code === 'KeyB') {\r\n      document.getElementById('paintBucket').classList.add('active');\r\n      document.getElementById('pencil').classList.remove('active');\r\n      document.getElementById('chooseColor').classList.remove('active');\r\n      document.getElementById('canvas').classList.remove('pencil');\r\n      document.getElementById('canvas').classList.remove('choose-color');\r\n      document.getElementById('canvas').classList.add('paint-bucket');\r\n    }\r\n    if (event.code === 'KeyC') {\r\n      document.getElementById('chooseColor').classList.add('active');\r\n      document.getElementById('canvas').classList.add('choose-color');\r\n      document.getElementById('paintBucket').classList.remove('active');\r\n      document.getElementById('pencil').classList.remove('active');\r\n      document.getElementById('canvas').classList.remove('pencil');\r\n      document.getElementById('canvas').classList.remove('paint-bucket');\r\n    }\r\n    if (event.code === 'KeyP') {\r\n      document.getElementById('pencil').classList.add('active');\r\n      document.getElementById('canvas').classList.add('pencil');\r\n      document.getElementById('paintBucket').classList.remove('active');\r\n      document.getElementById('chooseColor').classList.remove('active');\r\n      document.getElementById('canvas').classList.remove('choose-color');\r\n      document.getElementById('canvas').classList.remove('paint-bucket');\r\n    }\r\n  }\r\n  \r\n  // document.addEventListener('keydown', pressKeys);\r\n\r\n  export { pressKeys }","import {color, ctx } from '../index'\r\nimport { canvasSize } from '../tools/size'\r\nimport {rgbToHex } from '../color/rgbToHex'\r\n\r\nfunction paintBucket(event){\r\n    let size = parseInt(canvas.style.width) / canvasSize;\r\n    let x = event.offsetX;\r\n    let y = event.offsetY;\r\n    const colorPixel = ctx.getImageData(parseInt(x / (parseInt(canvas.style.width, 10) / canvasSize)),\r\n    parseInt(y / (parseInt(canvas.style.height, 10) / canvasSize)), 1, 1).data;\r\n    const rgb = `rgb(${colorPixel[0]}, ${colorPixel[1]}, ${colorPixel[2]})`;\r\n    const value = rgbToHex(rgb);\r\n    const pixels = [];\r\n    const pixelMeet = {};\r\n    pixels.push([x, y]);\r\n    ctx.fillStyle = color;\r\n    while (pixels.length > 0) {\r\n        const pixel = pixels.pop();\r\n        const xNow = pixel[0];\r\n        const yNow = pixel[1];\r\n        if (pixelMeet[`${xNow} ${yNow}`] === true) {\r\n            continue;\r\n        }\r\n        pixelMeet[`${xNow} ${yNow}`] = true;\r\n        const colorPixel2 = ctx.getImageData(parseInt(xNow / (parseInt(canvas.style.width, 10) / canvasSize)),\r\n        parseInt(yNow / (parseInt(canvas.style.height, 10) / canvasSize)), 1, 1).data;\r\n        const rgb2 = `rgb(${colorPixel2[0]}, ${colorPixel2[1]}, ${colorPixel2[2]})`;\r\n        const value2 = rgbToHex(rgb2);\r\n        if (value2 === value) {\r\n            ctx.fillRect(parseInt(xNow / (parseInt(canvas.style.width, 10) / canvasSize)),\r\n            parseInt(yNow / (parseInt(canvas.style.height, 10) / canvasSize)), 1, 1);\r\n            if (xNow !== 512 && pixelMeet[`${+xNow + size} ${yNow}`] !== true) {\r\n                pixels.push([+xNow + size, yNow]);\r\n            }\r\n            if (xNow !== 0 && pixelMeet[`${+xNow - size} ${yNow}`] !== true) {\r\n                pixels.push([+xNow - size, yNow]);\r\n            }\r\n            if (yNow !== 512 && pixelMeet[`${xNow} ${+yNow + size}`] !== true) {\r\n                pixels.push([xNow, +yNow + size]);\r\n            }\r\n            if (yNow !== 0 && pixelMeet[`${xNow} ${+yNow - size}`] !== true) {\r\n                pixels.push([xNow, +yNow - size]);\r\n            }\r\n        }\r\n    }\r\n    localStorage.setItem('canvas', canvas.toDataURL());\r\n}\r\n\r\nfunction fullBucket(color){\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0,0,512,512);\r\n    localStorage.setItem('canvas', canvas.toDataURL());\r\n}\r\n\r\nexport { paintBucket,fullBucket}\r\n","/**\r\n * This class lets you encode animated GIF files\r\n * Base class :  http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nGIFEncoder = function() {\r\n\r\n\tfor (var i = 0, chr = {}; i < 256; i++)\r\n\t\tchr[i] = String.fromCharCode(i);\r\n\r\n\tfunction ByteArray() {\r\n\t\tthis.bin = [];\r\n\t}\r\n\r\n\tByteArray.prototype.getData = function() {\r\n\t\tfor (var v = '', l = this.bin.length, i = 0; i < l; i++)\r\n\t\t\tv += chr[this.bin[i]];\r\n\t\treturn v;\r\n\t};\r\n\r\n\tByteArray.prototype.writeByte = function(val) {\r\n\t\tthis.bin.push(val);\r\n\t};\r\n\r\n\tByteArray.prototype.writeUTFBytes = function(string) {\r\n\t\tfor (var l = string.length, i = 0; i < l; i++)\r\n\t\t\tthis.writeByte(string.charCodeAt(i));\r\n\t};\r\n\r\n\tByteArray.prototype.writeBytes = function(array, offset, length) {\r\n\t\tfor (var l = length || array.length, i = offset || 0; i < l; i++)\r\n\t\t\tthis.writeByte(array[i]);\r\n\t};\r\n\r\n\tvar exports = {};\r\n\tvar width; // image size\r\n\tvar height;\r\n\tvar transparent = null; // transparent color if given\r\n\tvar transIndex; // transparent index in color table\r\n\tvar repeat = -1; // no repeat\r\n\tvar delay = 0; // frame delay (hundredths)\r\n\tvar started = false; // ready to output frames\r\n\tvar out;\r\n\tvar image; // current frame\r\n\tvar pixels; // BGR byte array from frame\r\n\tvar indexedPixels; // converted frame indexed to palette\r\n\tvar colorDepth; // number of bit planes\r\n\tvar colorTab; // RGB palette\r\n\tvar usedEntry = []; // active palette entries\r\n\tvar palSize = 7; // color table size (bits-1)\r\n\tvar dispose = -1; // disposal code (-1 = use default)\r\n\tvar closeStream = false; // close stream when finished\r\n\tvar firstFrame = true;\r\n\tvar sizeSet = false; // if false, get size from first frame\r\n\tvar sample = 10; // default sample interval for quantizer\r\n\tvar comment = \"Generated by jsgif (https://github.com/antimatter15/jsgif/)\"; // default comment for generated gif\r\n\r\n\t/**\r\n\t * Sets the delay time between each frame, or changes it for subsequent frames\r\n\t * (applies to last frame added)\r\n\t * int delay time in milliseconds\r\n\t * @param ms\r\n\t */\r\n\r\n\tvar setDelay = exports.setDelay = function setDelay(ms) {\r\n\t\tdelay = Math.round(ms / 10);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets the GIF frame disposal code for the last added frame and any\r\n\t *\r\n\t * subsequent frames. Default is 0 if no transparent color has been set,\r\n\t * otherwise 2.\r\n\t * @param code\r\n\t * int disposal code.\r\n\t */\r\n\r\n\tvar setDispose = exports.setDispose = function setDispose(code) {\r\n\t\tif (code >= 0) dispose = code;\r\n\t};\r\n\r\n\t/**\r\n\t * Sets the number of times the set of GIF frames should be played. Default is\r\n\t * 1; 0 means play indefinitely. Must be invoked before the first image is\r\n\t * added.\r\n\t *\r\n\t * @param iter\r\n\t * int number of iterations.\r\n\t * @return\r\n\t */\r\n\r\n\tvar setRepeat = exports.setRepeat = function setRepeat(iter) {\r\n\t\tif (iter >= 0) repeat = iter;\r\n\t};\r\n\r\n\t/**\r\n\t * Sets the transparent color for the last added frame and any subsequent\r\n\t * frames. Since all colors are subject to modification in the quantization\r\n\t * process, the color in the final palette for each frame closest to the given\r\n\t * color becomes the transparent color for that frame. May be set to null to\r\n\t * indicate no transparent color.\r\n\t * @param\r\n\t * Color to be treated as transparent on display.\r\n\t */\r\n\r\n\tvar setTransparent = exports.setTransparent = function setTransparent(c) {\r\n\t\ttransparent = c;\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Sets the comment for the block comment\r\n\t * @param\r\n\t * string to be insterted as comment\r\n\t */\r\n\r\n\tvar setComment = exports.setComment = function setComment(c) {\r\n\t\tcomment = c;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * The addFrame method takes an incoming BitmapData object to create each frames\r\n\t * @param\r\n\t * BitmapData object to be treated as a GIF's frame\r\n\t */\r\n\r\n\tvar addFrame = exports.addFrame = function addFrame(im, is_imageData) {\r\n\r\n\t\tif ((im === null) || !started || out === null) {\r\n\t\t\tthrow new Error(\"Please call start method before calling addFrame\");\r\n\t\t}\r\n\r\n\t\tvar ok = true;\r\n\r\n\t\ttry {\r\n\t\t\tif (!is_imageData) {\r\n\t\t\t\timage = im.getImageData(0, 0, im.canvas.width, im.canvas.height).data;\r\n\t\t\t\tif (!sizeSet) setSize(im.canvas.width, im.canvas.height);\r\n\t\t\t} else {\r\n\t\t\t\tif(im instanceof ImageData) {\r\n\t\t\t\t\timage = im.data;\r\n\t\t\t\t\tif(!sizeset || width!=im.width || height!=im.height) {\r\n\t\t\t\t\t\tsetSize(im.width,im.height);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if(im instanceof Uint8ClampedArray) {\r\n\t\t\t\t\tif(im.length==(width*height*4)) {\r\n\t\t\t\t\t\timage=im;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(\"Please set the correct size: ImageData length mismatch\");\r\n\t\t\t\t\t\tok=false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"Please provide correct input\");\r\n\t\t\t\t\tok=false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgetImagePixels(); // convert to correct format if necessary\r\n\t\t\tanalyzePixels(); // build color table & map pixels\r\n\r\n\t\t\tif (firstFrame) {\r\n\t\t\t\twriteLSD(); // logical screen descriptior\r\n\t\t\t\twritePalette(); // global color table\r\n\t\t\t\tif (repeat >= 0) {\r\n\t\t\t\t\t// use NS app extension to indicate reps\r\n\t\t\t\t\twriteNetscapeExt();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twriteGraphicCtrlExt(); // write graphic control extension\r\n\t\t\tif (comment !== '') {\r\n\t\t\t\twriteCommentExt(); // write comment extension\r\n\t\t\t}\r\n\t\t\twriteImageDesc(); // image descriptor\r\n\t\t\tif (!firstFrame) writePalette(); // local color table\r\n\t\t\twritePixels(); // encode and write pixel data\r\n\t\t\tfirstFrame = false;\r\n\t\t} catch (e) {\r\n\t\t\tok = false;\r\n\t\t}\r\n\r\n\t\treturn ok;\r\n\t};\r\n\t\r\n\t/**\r\n\t* @description: Downloads the encoded gif with the given name\r\n\t* No need of any conversion from the stream data (out) to base64\r\n\t* Solves the issue of large file sizes when there are more frames\r\n\t* and does not involve in creation of any temporary data in the process\r\n\t* so no wastage of memory, and speeds up the process of downloading\r\n\t* to just calling this function.\r\n\t* @parameter {String} filename filename used for downloading the gif\r\n\t*/\r\n\t\r\n\tvar download = exports.download = function download(filename) {\r\n\t\tif(out===null || closeStream==false) {\r\n\t\t\tconsole.log(\"Please call start method and add frames and call finish method before calling download\"); \r\n\t\t} else {\r\n\t\t\tfilename= filename !== undefined ? ( filename.endsWith(\".gif\")? filename: filename+\".gif\" ): \"download.gif\";\r\n\t\t\tvar templink = document.createElement(\"a\");\r\n\t\t\ttemplink.download=filename;\r\n\t\t\ttemplink.href= URL.createObjectURL(new Blob([new Uint8Array(out.bin)], {type : \"image/gif\" } ));\r\n\t\t\ttemplink.click();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds final trailer to the GIF stream, if you don't call the finish method\r\n\t * the GIF stream will not be valid.\r\n\t */\r\n\r\n\tvar finish = exports.finish = function finish() {\r\n\r\n\t\tif (!started) return false;\r\n\r\n\t\tvar ok = true;\r\n\t\tstarted = false;\r\n\r\n\t\ttry {\r\n\t\t\tout.writeByte(0x3b); // gif trailer\r\n\t\t\tcloseStream=true;\r\n\t\t} catch (e) {\r\n\t\t\tok = false;\r\n\t\t}\r\n\r\n\t\treturn ok;\r\n\t};\r\n\r\n\t/**\r\n\t * Resets some members so that a new stream can be started.\r\n\t * This method is actually called by the start method\r\n\t */\r\n\r\n\tvar reset = function reset() {\r\n\r\n\t\t// reset for subsequent use\r\n\t\ttransIndex = 0;\r\n\t\timage = null;\r\n\t\tpixels = null;\r\n\t\tindexedPixels = null;\r\n\t\tcolorTab = null;\r\n\t\tcloseStream = false;\r\n\t\tfirstFrame = true;\r\n\t};\r\n\r\n\t/**\r\n\t * * Sets frame rate in frames per second. Equivalent to\r\n\t * <code>setDelay(1000/fps)</code>.\r\n\t * @param fps\r\n\t * float frame rate (frames per second)\r\n\t */\r\n\r\n\tvar setFrameRate = exports.setFrameRate = function setFrameRate(fps) {\r\n\t\tif (fps != 0xf) delay = Math.round(100 / fps);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets quality of color quantization (conversion of images to the maximum 256\r\n\t * colors allowed by the GIF specification). Lower values (minimum = 1)\r\n\t * produce better colors, but slow processing significantly. 10 is the\r\n\t * default, and produces good color mapping at reasonable speeds. Values\r\n\t * greater than 20 do not yield significant improvements in speed.\r\n\t * @param quality\r\n\t * int greater than 0.\r\n\t * @return\r\n\t */\r\n\r\n\tvar setQuality = exports.setQuality = function setQuality(quality) {\r\n\t\tif (quality < 1) quality = 1;\r\n\t\tsample = quality;\r\n\t};\r\n\r\n\t/**\r\n\t * Sets the GIF frame size. The default size is the size of the first frame\r\n\t * added if this method is not invoked.\r\n\t * @param w\r\n\t * int frame width.\r\n\t * @param h\r\n\t * int frame width.\r\n\t */\r\n\r\n\tvar setSize = exports.setSize = function setSize(w, h) {\r\n\r\n\t\tif (started && !firstFrame) return;\r\n\t\twidth = w;\r\n\t\theight = h;\r\n\t\tif (width < 1) width = 320;\r\n\t\tif (height < 1) height = 240;\r\n\t\tsizeSet = true;\r\n\t};\r\n\r\n\t/**\r\n\t * Initiates GIF file creation on the given stream.\r\n\t * @param os\r\n\t * OutputStream on which GIF images are written.\r\n\t * @return false if initial write failed.\r\n\t */\r\n\r\n\tvar start = exports.start = function start() {\r\n\r\n\t\treset();\r\n\t\tvar ok = true;\r\n\t\tcloseStream = false;\r\n\t\tout = new ByteArray();\r\n\t\ttry {\r\n\t\t\tout.writeUTFBytes(\"GIF89a\"); // header\r\n\t\t} catch (e) {\r\n\t\t\tok = false;\r\n\t\t}\r\n\r\n\t\treturn started = ok;\r\n\t};\r\n\r\n\tvar cont = exports.cont = function cont() {\r\n\r\n\t\treset();\r\n\t\tvar ok = true;\r\n\t\tcloseStream = false;\r\n\t\tout = new ByteArray();\r\n\r\n\t\treturn started = ok;\r\n\t};\r\n\r\n\t/**\r\n\t * Analyzes image colors and creates color map.\r\n\t */\r\n\r\n\tvar analyzePixels = function analyzePixels() {\r\n\r\n\t\tvar len = pixels.length;\r\n\t\tvar nPix = len / 3;\r\n\t\tindexedPixels = [];\r\n\t\tvar nq = new NeuQuant(pixels, len, sample);\r\n\r\n\t\t// initialize quantizer\r\n\t\tcolorTab = nq.process(); // create reduced palette\r\n\r\n\t\t// map image pixels to new palette\r\n\t\tvar k = 0;\r\n\t\tfor (var j = 0; j < nPix; j++) {\r\n\t\t\tvar index = nq.map(pixels[k++] & 0xff, pixels[k++] & 0xff, pixels[k++] & 0xff);\r\n\t\t\tusedEntry[index] = true;\r\n\t\t\tindexedPixels[j] = index;\r\n\t\t}\r\n\r\n\t\tpixels = null;\r\n\t\tcolorDepth = 8;\r\n\t\tpalSize = 7;\r\n\r\n\t\t// get closest match to transparent color if specified\r\n\t\tif (transparent !== null) {\r\n\t\t\ttransIndex = findClosest(transparent);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns index of palette color closest to c\r\n\t */\r\n\r\n\tvar findClosest = function findClosest(c) {\r\n\r\n\t\tif (colorTab === null) return -1;\r\n\t\tvar r = (c & 0xFF0000) >> 16;\r\n\t\tvar g = (c & 0x00FF00) >> 8;\r\n\t\tvar b = (c & 0x0000FF);\r\n\t\tvar minpos = 0;\r\n\t\tvar dmin = 256 * 256 * 256;\r\n\t\tvar len = colorTab.length;\r\n\r\n\t\tfor (var i = 0; i < len;) {\r\n\t\t\tvar dr = r - (colorTab[i++] & 0xff);\r\n\t\t\tvar dg = g - (colorTab[i++] & 0xff);\r\n\t\t\tvar db = b - (colorTab[i] & 0xff);\r\n\t\t\tvar d = dr * dr + dg * dg + db * db;\r\n\t\t\tvar index = i / 3;\r\n\t\t\tif (usedEntry[index] && (d < dmin)) {\r\n\t\t\t\tdmin = d;\r\n\t\t\t\tminpos = index;\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\t\treturn minpos;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts image pixels into byte array \"pixels\r\n\t */\r\n\r\n\tvar getImagePixels = function getImagePixels() {\r\n\t\tvar w = width;\r\n\t\tvar h = height;\r\n\t\tpixels = [];\r\n\t\tvar data = image;\r\n\t\tvar count = 0;\r\n\r\n\t\tfor (var i = 0; i < h; i++) {\r\n\r\n\t\t\tfor (var j = 0; j < w; j++) {\r\n\r\n\t\t\t\tvar b = (i * w * 4) + j * 4;\r\n\t\t\t\tpixels[count++] = data[b];\r\n\t\t\t\tpixels[count++] = data[b + 1];\r\n\t\t\t\tpixels[count++] = data[b + 2];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Writes Graphic Control Extension\r\n\t */\r\n\r\n\tvar writeGraphicCtrlExt = function writeGraphicCtrlExt() {\r\n\t\tout.writeByte(0x21); // extension introducer\r\n\t\tout.writeByte(0xf9); // GCE label\r\n\t\tout.writeByte(4); // data block size\r\n\t\tvar transp;\r\n\t\tvar disp;\r\n\t\tif (transparent === null) {\r\n\t\t\ttransp = 0;\r\n\t\t\tdisp = 0; // dispose = no action\r\n\t\t} else {\r\n\t\t\ttransp = 1;\r\n\t\t\tdisp = 2; // force clear if using transparent color\r\n\t\t}\r\n\t\tif (dispose >= 0) {\r\n\t\t\tdisp = dispose & 7; // user override\r\n\t\t}\r\n\t\tdisp <<= 2;\r\n\t\t// packed fields\r\n\t\tout.writeByte(0 | // 1:3 reserved\r\n\t\t\tdisp | // 4:6 disposal\r\n\t\t\t0 | // 7 user input - 0 = none\r\n\t\t\ttransp); // 8 transparency flag\r\n\r\n\t\tWriteShort(delay); // delay x 1/100 sec\r\n\t\tout.writeByte(transIndex); // transparent color index\r\n\t\tout.writeByte(0); // block terminator\r\n\t};\r\n\r\n\t/**\r\n\t * Writes Comment Extention\r\n\t */\r\n\r\n\tvar writeCommentExt = function writeCommentExt() {\r\n\t\tout.writeByte(0x21); // extension introducer\r\n\t\tout.writeByte(0xfe); // comment label\r\n\t\tout.writeByte(comment.length); // Block Size (s)\r\n\t\tout.writeUTFBytes(comment);\r\n\t\tout.writeByte(0); // block terminator\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Writes Image Descriptor\r\n\t */\r\n\r\n\tvar writeImageDesc = function writeImageDesc() {\r\n\r\n\t\tout.writeByte(0x2c); // image separator\r\n\t\tWriteShort(0); // image position x,y = 0,0\r\n\t\tWriteShort(0);\r\n\t\tWriteShort(width); // image size\r\n\t\tWriteShort(height);\r\n\r\n\t\t// packed fields\r\n\t\tif (firstFrame) {\r\n\t\t\t// no LCT - GCT is used for first (or only) frame\r\n\t\t\tout.writeByte(0);\r\n\t\t} else {\r\n\t\t\t// specify normal LCT\r\n\t\t\tout.writeByte(0x80 | // 1 local color table 1=yes\r\n\t\t\t\t0 | // 2 interlace - 0=no\r\n\t\t\t\t0 | // 3 sorted - 0=no\r\n\t\t\t\t0 | // 4-5 reserved\r\n\t\t\t\tpalSize); // 6-8 size of color table\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Writes Logical Screen Descriptor\r\n\t */\r\n\r\n\tvar writeLSD = function writeLSD() {\r\n\r\n\t\t// logical screen size\r\n\t\tWriteShort(width);\r\n\t\tWriteShort(height);\r\n\t\t// packed fields\r\n\t\tout.writeByte((0x80 | // 1 : global color table flag = 1 (gct used)\r\n\t\t\t0x70 | // 2-4 : color resolution = 7\r\n\t\t\t0x00 | // 5 : gct sort flag = 0\r\n\t\t\tpalSize)); // 6-8 : gct size\r\n\r\n\t\tout.writeByte(0); // background color index\r\n\t\tout.writeByte(0); // pixel aspect ratio - assume 1:1\r\n\t};\r\n\r\n\t/**\r\n\t * Writes Netscape application extension to define repeat count.\r\n\t */\r\n\r\n\tvar writeNetscapeExt = function writeNetscapeExt() {\r\n\t\tout.writeByte(0x21); // extension introducer\r\n\t\tout.writeByte(0xff); // app extension label\r\n\t\tout.writeByte(11); // block size\r\n\t\tout.writeUTFBytes(\"NETSCAPE\" + \"2.0\"); // app id + auth code\r\n\t\tout.writeByte(3); // sub-block size\r\n\t\tout.writeByte(1); // loop sub-block id\r\n\t\tWriteShort(repeat); // loop count (extra iterations, 0=repeat forever)\r\n\t\tout.writeByte(0); // block terminator\r\n\t};\r\n\r\n\t/**\r\n\t * Writes color table\r\n\t */\r\n\r\n\tvar writePalette = function writePalette() {\r\n\t\tout.writeBytes(colorTab);\r\n\t\tvar n = (3 * 256) - colorTab.length;\r\n\t\tfor (var i = 0; i < n; i++) out.writeByte(0);\r\n\t};\r\n\r\n\tvar WriteShort = function WriteShort(pValue) {\r\n\t\tout.writeByte(pValue & 0xFF);\r\n\t\tout.writeByte((pValue >> 8) & 0xFF);\r\n\t};\r\n\r\n\t/**\r\n\t * Encodes and writes pixel data\r\n\t */\r\n\r\n\tvar writePixels = function writePixels() {\r\n\t\tvar myencoder = new LZWEncoder(width, height, indexedPixels, colorDepth);\r\n\t\tmyencoder.encode(out);\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieves the GIF stream\r\n\t */\r\n\r\n\tvar stream = exports.stream = function stream() {\r\n\t\treturn out;\r\n\t};\r\n\r\n\tvar setProperties = exports.setProperties = function setProperties(has_start, is_first) {\r\n\t\tstarted = has_start;\r\n\t\tfirstFrame = is_first;\r\n\t};\r\n\r\n\treturn exports;\r\n\r\n};\r\n","/**\r\n * This class handles LZW encoding\r\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nLZWEncoder = function() {\r\n\r\n\tvar exports = {};\r\n\tvar EOF = -1;\r\n\tvar imgW;\r\n\tvar imgH;\r\n\tvar pixAry;\r\n\tvar initCodeSize;\r\n\tvar remaining;\r\n\tvar curPixel;\r\n\r\n\t// GIFCOMPR.C - GIF Image compression routines\r\n\t// Lempel-Ziv compression based on 'compress'. GIF modifications by\r\n\t// David Rowley (mgardi@watdcsu.waterloo.edu)\r\n\t// General DEFINEs\r\n\r\n\tvar BITS = 12;\r\n\tvar HSIZE = 5003; // 80% occupancy\r\n\r\n\t// GIF Image compression - modified 'compress'\r\n\t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\r\n\t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\r\n\t// Jim McKie (decvax!mcvax!jim)\r\n\t// Steve Davies (decvax!vax135!petsd!peora!srd)\r\n\t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\r\n\t// James A. Woods (decvax!ihnp4!ames!jaw)\r\n\t// Joe Orost (decvax!vax135!petsd!joe)\r\n\r\n\tvar n_bits; // number of bits/code\r\n\tvar maxbits = BITS; // user settable max # bits/code\r\n\tvar maxcode; // maximum code, given n_bits\r\n\tvar maxmaxcode = 1 << BITS; // should NEVER generate this code\r\n\tvar htab = [];\r\n\tvar codetab = [];\r\n\tvar hsize = HSIZE; // for dynamic table sizing\r\n\tvar free_ent = 0; // first unused entry\r\n\r\n\t// block compression parameters -- after all codes are used up,\r\n\t// and compression rate changes, start over.\r\n\r\n\tvar clear_flg = false;\r\n\r\n\t// Algorithm: use open addressing double hashing (no chaining) on the\r\n\t// prefix code / next character combination. We do a variant of Knuth's\r\n\t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\r\n\t// secondary probe. Here, the modular division first probe is gives way\r\n\t// to a faster exclusive-or manipulation. Also do block compression with\r\n\t// an adaptive reset, whereby the code table is cleared when the compression\r\n\t// ratio decreases, but after the table fills. The variable-length output\r\n\t// codes are re-sized at this point, and a special CLEAR code is generated\r\n\t// for the decompressor. Late addition: construct the table according to\r\n\t// file size for noticeable speed improvement on small files. Please direct\r\n\t// questions about this implementation to ames!jaw.\r\n\r\n\tvar g_init_bits;\r\n\tvar ClearCode;\r\n\tvar EOFCode;\r\n\r\n\t// output\r\n\t// Output the given code.\r\n\t// Inputs:\r\n\t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\r\n\t// that n_bits =< wordsize - 1.\r\n\t// Outputs:\r\n\t// Outputs code to the file.\r\n\t// Assumptions:\r\n\t// Chars are 8 bits long.\r\n\t// Algorithm:\r\n\t// Maintain a BITS character long buffer (so that 8 codes will\r\n\t// fit in it exactly). Use the VAX insv instruction to insert each\r\n\t// code in turn. When the buffer fills up empty it and start over.\r\n\r\n\tvar cur_accum = 0;\r\n\tvar cur_bits = 0;\r\n\tvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\r\n\r\n\t// Number of characters so far in this 'packet'\r\n\tvar a_count;\r\n\r\n\t// Define the storage for the packet accumulator\r\n\tvar accum = [];\r\n\r\n\tvar LZWEncoder = exports.LZWEncoder = function LZWEncoder(width, height, pixels, color_depth) {\r\n\t\timgW = width;\r\n\t\timgH = height;\r\n\t\tpixAry = pixels;\r\n\t\tinitCodeSize = Math.max(2, color_depth);\r\n\t};\r\n\r\n\t// Add a character to the end of the current packet, and if it is 254\r\n\t// characters, flush the packet to disk.\r\n\tvar char_out = function char_out(c, outs) {\r\n\t\taccum[a_count++] = c;\r\n\t\tif (a_count >= 254) flush_char(outs);\r\n\t};\r\n\r\n\t// Clear out the hash table\r\n\t// table clear for block compress\r\n\r\n\tvar cl_block = function cl_block(outs) {\r\n\t\tcl_hash(hsize);\r\n\t\tfree_ent = ClearCode + 2;\r\n\t\tclear_flg = true;\r\n\t\toutput(ClearCode, outs);\r\n\t};\r\n\r\n\t// reset code table\r\n\tvar cl_hash = function cl_hash(hsize) {\r\n\t\tfor (var i = 0; i < hsize; ++i) htab[i] = -1;\r\n\t};\r\n\r\n\tvar compress = exports.compress = function compress(init_bits, outs) {\r\n\r\n\t\tvar fcode;\r\n\t\tvar i; /* = 0 */\r\n\t\tvar c;\r\n\t\tvar ent;\r\n\t\tvar disp;\r\n\t\tvar hsize_reg;\r\n\t\tvar hshift;\r\n\r\n\t\t// Set up the globals: g_init_bits - initial number of bits\r\n\t\tg_init_bits = init_bits;\r\n\r\n\t\t// Set up the necessary values\r\n\t\tclear_flg = false;\r\n\t\tn_bits = g_init_bits;\r\n\t\tmaxcode = MAXCODE(n_bits);\r\n\r\n\t\tClearCode = 1 << (init_bits - 1);\r\n\t\tEOFCode = ClearCode + 1;\r\n\t\tfree_ent = ClearCode + 2;\r\n\r\n\t\ta_count = 0; // clear packet\r\n\r\n\t\tent = nextPixel();\r\n\r\n\t\thshift = 0;\r\n\t\tfor (fcode = hsize; fcode < 65536; fcode *= 2)\r\n\t\t\t++hshift;\r\n\t\thshift = 8 - hshift; // set hash code range bound\r\n\r\n\t\thsize_reg = hsize;\r\n\t\tcl_hash(hsize_reg); // clear hash table\r\n\r\n\t\toutput(ClearCode, outs);\r\n\r\n\t\touter_loop: while ((c = nextPixel()) != EOF) {\r\n\t\t\tfcode = (c << maxbits) + ent;\r\n\t\t\ti = (c << hshift) ^ ent; // xor hashing\r\n\r\n\t\t\tif (htab[i] == fcode) {\r\n\t\t\t\tent = codetab[i];\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\telse if (htab[i] >= 0) { // non-empty slot\r\n\r\n\t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\r\n\t\t\t\tif (i === 0) disp = 1;\r\n\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif ((i -= disp) < 0)\r\n\t\t\t\t\t\ti += hsize_reg;\r\n\r\n\t\t\t\t\tif (htab[i] == fcode) {\r\n\t\t\t\t\t\tent = codetab[i];\r\n\t\t\t\t\t\tcontinue outer_loop;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (htab[i] >= 0);\r\n\t\t\t}\r\n\r\n\t\t\toutput(ent, outs);\r\n\t\t\tent = c;\r\n\t\t\tif (free_ent < maxmaxcode) {\r\n\t\t\t\tcodetab[i] = free_ent++; // code -> hashtable\r\n\t\t\t\thtab[i] = fcode;\r\n\t\t\t}\r\n\t\t\telse cl_block(outs);\r\n\t\t}\r\n\r\n\t\t// Put out the final code.\r\n\t\toutput(ent, outs);\r\n\t\toutput(EOFCode, outs);\r\n\t};\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\tvar encode = exports.encode = function encode(os) {\r\n\t\tos.writeByte(initCodeSize); // write \"initial code size\" byte\r\n\t\tremaining = imgW * imgH; // reset navigation variables\r\n\t\tcurPixel = 0;\r\n\t\tcompress(initCodeSize + 1, os); // compress and write the pixel data\r\n\t\tos.writeByte(0); // write block terminator\r\n\t};\r\n\r\n\t// Flush the packet to disk, and reset the accumulator\r\n\tvar flush_char = function flush_char(outs) {\r\n\t\tif (a_count > 0) {\r\n\t\t\touts.writeByte(a_count);\r\n\t\t\touts.writeBytes(accum, 0, a_count);\r\n\t\t\ta_count = 0;\r\n\t\t}\r\n\t};\r\n\r\n\tvar MAXCODE = function MAXCODE(n_bits) {\r\n\t\treturn (1 << n_bits) - 1;\r\n\t};\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\t// Return the next pixel from the image\r\n\t// ----------------------------------------------------------------------------\r\n\r\n\tvar nextPixel = function nextPixel() {\r\n\t\tif (remaining === 0) return EOF;\r\n\t\t--remaining;\r\n\t\tvar pix = pixAry[curPixel++];\r\n\t\treturn pix & 0xff;\r\n\t};\r\n\r\n\tvar output = function output(code, outs) {\r\n\r\n\t\tcur_accum &= masks[cur_bits];\r\n\r\n\t\tif (cur_bits > 0) cur_accum |= (code << cur_bits);\r\n\t\telse cur_accum = code;\r\n\r\n\t\tcur_bits += n_bits;\r\n\r\n\t\twhile (cur_bits >= 8) {\r\n\t\t\tchar_out((cur_accum & 0xff), outs);\r\n\t\t\tcur_accum >>= 8;\r\n\t\t\tcur_bits -= 8;\r\n\t\t}\r\n\r\n\t\t// If the next entry is going to be too big for the code size,\r\n\t\t// then increase it, if possible.\r\n\r\n\t\tif (free_ent > maxcode || clear_flg) {\r\n\r\n\t\t\tif (clear_flg) {\r\n\r\n\t\t\t\tmaxcode = MAXCODE(n_bits = g_init_bits);\r\n\t\t\t\tclear_flg = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t++n_bits;\r\n\t\t\t\tif (n_bits == maxbits) maxcode = maxmaxcode;\r\n\t\t\t\telse maxcode = MAXCODE(n_bits);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (code == EOFCode) {\r\n\r\n\t\t\t// At EOF, write the rest of the buffer.\r\n\t\t\twhile (cur_bits > 0) {\r\n\t\t\t\tchar_out((cur_accum & 0xff), outs);\r\n\t\t\t\tcur_accum >>= 8;\r\n\t\t\t\tcur_bits -= 8;\r\n\t\t\t}\r\n\r\n\t\t\tflush_char(outs);\r\n\t\t}\r\n\t};\r\n\r\n\tLZWEncoder.apply(this, arguments);\r\n\treturn exports;\r\n};\r\n","/*\r\n * NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\r\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n */\r\n\r\n/*\r\n * This class handles Neural-Net quantization algorithm\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nNeuQuant = function() {\r\n\r\n\tvar exports = {};\r\n\tvar netsize = 256; /* number of colours used */\r\n\r\n\t/* four primes near 500 - assume no image has a length so large */\r\n\t/* that it is divisible by all four primes */\r\n\r\n\tvar prime1 = 499;\r\n\tvar prime2 = 491;\r\n\tvar prime3 = 487;\r\n\tvar prime4 = 503;\r\n\tvar minpicturebytes = (3 * prime4); /* minimum size for input image */\r\n\r\n\t/*\r\n\t * Program Skeleton ---------------- [select samplefac in range 1..30] [read\r\n\t * image from input file] pic = (unsigned char*) malloc(3*width*height);\r\n\t * initnet(pic,3*width*height,samplefac); learn(); unbiasnet(); [write output\r\n\t * image header, using writecolourmap(f)] inxbuild(); write output image using\r\n\t * inxsearch(b,g,r)\r\n\t */\r\n\r\n\t/*\r\n\t * Network Definitions -------------------\r\n\t */\r\n\r\n\tvar maxnetpos = (netsize - 1);\r\n\tvar netbiasshift = 4; /* bias for colour values */\r\n\tvar ncycles = 100; /* no. of learning cycles */\r\n\r\n\t/* defs for freq and bias */\r\n\tvar intbiasshift = 16; /* bias for fractions */\r\n\tvar intbias = (1 << intbiasshift);\r\n\tvar gammashift = 10; /* gamma = 1024 */\r\n\tvar gamma = (1 << gammashift);\r\n\tvar betashift = 10;\r\n\tvar beta = (intbias >> betashift); /* beta = 1/1024 */\r\n\tvar betagamma = (intbias << (gammashift - betashift));\r\n\r\n\t/* defs for decreasing radius factor */\r\n\tvar initrad = (netsize >> 3); /* for 256 cols, radius starts */\r\n\tvar radiusbiasshift = 6; /* at 32.0 biased by 6 bits */\r\n\tvar radiusbias = (1 << radiusbiasshift);\r\n\tvar initradius = (initrad * radiusbias); /* and decreases by a */\r\n\tvar radiusdec = 30; /* factor of 1/30 each cycle */\r\n\r\n\t/* defs for decreasing alpha factor */\r\n\tvar alphabiasshift = 10; /* alpha starts at 1.0 */\r\n\tvar initalpha = (1 << alphabiasshift);\r\n\tvar alphadec; /* biased by 10 bits */\r\n\r\n\t/* radbias and alpharadbias used for radpower calculation */\r\n\tvar radbiasshift = 8;\r\n\tvar radbias = (1 << radbiasshift);\r\n\tvar alpharadbshift = (alphabiasshift + radbiasshift);\r\n\tvar alpharadbias = (1 << alpharadbshift);\r\n\r\n\t/*\r\n\t * Types and Global Variables --------------------------\r\n\t */\r\n\r\n\tvar thepicture; /* the input image itself */\r\n\tvar lengthcount; /* lengthcount = H*W*3 */\r\n\tvar samplefac; /* sampling factor 1..30 */\r\n\r\n\t// typedef int pixel[4]; /* BGRc */\r\n\tvar network; /* the network itself - [netsize][4] */\r\n\tvar netindex = [];\r\n\r\n\t/* for network lookup - really 256 */\r\n\tvar bias = [];\r\n\r\n\t/* bias and freq arrays for learning */\r\n\tvar freq = [];\r\n\tvar radpower = [];\r\n\r\n\tvar NeuQuant = exports.NeuQuant = function NeuQuant(thepic, len, sample) {\r\n\r\n\t\tvar i;\r\n\t\tvar p;\r\n\r\n\t\tthepicture = thepic;\r\n\t\tlengthcount = len;\r\n\t\tsamplefac = sample;\r\n\r\n\t\tnetwork = new Array(netsize);\r\n\r\n\t\tfor (i = 0; i < netsize; i++) {\r\n\r\n\t\t\tnetwork[i] = new Array(4);\r\n\t\t\tp = network[i];\r\n\t\t\tp[0] = p[1] = p[2] = (i << (netbiasshift + 8)) / netsize;\r\n\t\t\tfreq[i] = intbias / netsize; /* 1/netsize */\r\n\t\t\tbias[i] = 0;\r\n\t\t}\r\n\t};\r\n\r\n\tvar colorMap = function colorMap() {\r\n\r\n\t\tvar map = [];\r\n\t\tvar index = new Array(netsize);\r\n\r\n\t\tfor (var i = 0; i < netsize; i++)\r\n\t\t\tindex[network[i][3]] = i;\r\n\r\n\t\tvar k = 0;\r\n\t\tfor (var l = 0; l < netsize; l++) {\r\n\t\t\tvar j = index[l];\r\n\t\t\tmap[k++] = (network[j][0]);\r\n\t\t\tmap[k++] = (network[j][1]);\r\n\t\t\tmap[k++] = (network[j][2]);\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/*\r\n\t * Insertion sort of network and building of netindex[0..255] (to do after\r\n\t * unbias)\r\n\t * -------------------------------------------------------------------------------\r\n\t */\r\n\r\n\tvar inxbuild = function inxbuild() {\r\n\r\n\t\tvar i;\r\n\t\tvar j;\r\n\t\tvar smallpos;\r\n\t\tvar smallval;\r\n\t\tvar p;\r\n\t\tvar q;\r\n\t\tvar previouscol;\r\n\t\tvar startpos;\r\n\r\n\t\tpreviouscol = 0;\r\n\t\tstartpos = 0;\r\n\t\tfor (i = 0; i < netsize; i++) {\r\n\r\n\t\t\tp = network[i];\r\n\t\t\tsmallpos = i;\r\n\t\t\tsmallval = p[1]; /* index on g */\r\n\r\n\t\t\t/* find smallest in i..netsize-1 */\r\n\t\t\tfor (j = i + 1; j < netsize; j++) {\r\n\r\n\t\t\t\tq = network[j];\r\n\t\t\t\tif (q[1] < smallval) { /* index on g */\r\n\t\t\t\t\tsmallpos = j;\r\n\t\t\t\t\tsmallval = q[1]; /* index on g */\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tq = network[smallpos];\r\n\r\n\t\t\t/* swap p (i) and q (smallpos) entries */\r\n\t\t\tif (i != smallpos) {\r\n\t\t\t\tj = q[0];\r\n\t\t\t\tq[0] = p[0];\r\n\t\t\t\tp[0] = j;\r\n\t\t\t\tj = q[1];\r\n\t\t\t\tq[1] = p[1];\r\n\t\t\t\tp[1] = j;\r\n\t\t\t\tj = q[2];\r\n\t\t\t\tq[2] = p[2];\r\n\t\t\t\tp[2] = j;\r\n\t\t\t\tj = q[3];\r\n\t\t\t\tq[3] = p[3];\r\n\t\t\t\tp[3] = j;\r\n\t\t\t}\r\n\r\n\t\t\t/* smallval entry is now in position i */\r\n\r\n\t\t\tif (smallval != previouscol) {\r\n\r\n\t\t\t\tnetindex[previouscol] = (startpos + i) >> 1;\r\n\r\n\t\t\t\tfor (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\r\n\r\n\t\t\t\tpreviouscol = smallval;\r\n\t\t\t\tstartpos = i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tnetindex[previouscol] = (startpos + maxnetpos) >> 1;\r\n\t\tfor (j = previouscol + 1; j < 256; j++) netindex[j] = maxnetpos; /* really 256 */\r\n\t};\r\n\r\n\t/*\r\n\t * Main Learning Loop ------------------\r\n\t */\r\n\r\n\tvar learn = function learn() {\r\n\r\n\t\tvar i;\r\n\t\tvar j;\r\n\t\tvar b;\r\n\t\tvar g;\r\n\t\tvar r;\r\n\t\tvar radius;\r\n\t\tvar rad;\r\n\t\tvar alpha;\r\n\t\tvar step;\r\n\t\tvar delta;\r\n\t\tvar samplepixels;\r\n\t\tvar p;\r\n\t\tvar pix;\r\n\t\tvar lim;\r\n\r\n\t\tif (lengthcount < minpicturebytes) samplefac = 1;\r\n\r\n\t\talphadec = 30 + ((samplefac - 1) / 3);\r\n\t\tp = thepicture;\r\n\t\tpix = 0;\r\n\t\tlim = lengthcount;\r\n\t\tsamplepixels = lengthcount / (3 * samplefac);\r\n\t\tdelta = (samplepixels / ncycles) | 0;\r\n\t\talpha = initalpha;\r\n\t\tradius = initradius;\r\n\r\n\t\trad = radius >> radiusbiasshift;\r\n\t\tif (rad <= 1) rad = 0;\r\n\r\n\t\tfor (i = 0; i < rad; i++) radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad));\r\n\r\n\t\tif (lengthcount < minpicturebytes) step = 3;\r\n\r\n\t\telse if ((lengthcount % prime1) !== 0) step = 3 * prime1;\r\n\r\n\t\telse {\r\n\r\n\t\t\tif ((lengthcount % prime2) !== 0) step = 3 * prime2;\r\n\t\t\telse {\r\n\t\t\t\tif ((lengthcount % prime3) !== 0) step = 3 * prime3;\r\n\t\t\t\telse step = 3 * prime4;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ti = 0;\r\n\t\twhile (i < samplepixels) {\r\n\r\n\t\t\tb = (p[pix + 0] & 0xff) << netbiasshift;\r\n\t\t\tg = (p[pix + 1] & 0xff) << netbiasshift;\r\n\t\t\tr = (p[pix + 2] & 0xff) << netbiasshift;\r\n\t\t\tj = contest(b, g, r);\r\n\r\n\t\t\taltersingle(alpha, j, b, g, r);\r\n\t\t\tif (rad !== 0) alterneigh(rad, j, b, g, r); /* alter neighbours */\r\n\r\n\t\t\tpix += step;\r\n\t\t\tif (pix >= lim) pix -= lengthcount;\r\n\r\n\t\t\ti++;\r\n\r\n\t\t\tif (delta === 0) delta = 1;\r\n\r\n\t\t\tif (i % delta === 0) {\r\n\t\t\t\talpha -= alpha / alphadec;\r\n\t\t\t\tradius -= radius / radiusdec;\r\n\t\t\t\trad = radius >> radiusbiasshift;\r\n\r\n\t\t\t\tif (rad <= 1) rad = 0;\r\n\r\n\t\t\t\tfor (j = 0; j < rad; j++) radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t ** Search for BGR values 0..255 (after net is unbiased) and return colour\r\n\t * index\r\n\t * ----------------------------------------------------------------------------\r\n\t */\r\n\r\n\tvar map = exports.map = function map(b, g, r) {\r\n\r\n\t\tvar i;\r\n\t\tvar j;\r\n\t\tvar dist;\r\n\t\tvar a;\r\n\t\tvar bestd;\r\n\t\tvar p;\r\n\t\tvar best;\r\n\r\n\t\tbestd = 1000; /* biggest possible dist is 256*3 */\r\n\t\tbest = -1;\r\n\t\ti = netindex[g]; /* index on g */\r\n\t\tj = i - 1; /* start at netindex[g] and work outwards */\r\n\r\n\t\twhile ((i < netsize) || (j >= 0)) {\r\n\r\n\t\t\tif (i < netsize) {\r\n\t\t\t\tp = network[i];\r\n\t\t\t\tdist = p[1] - g; /* inx key */\r\n\r\n\t\t\t\tif (dist >= bestd) i = netsize; /* stop iter */\r\n\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\tdist += a;\r\n\r\n\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (j >= 0) {\r\n\r\n\t\t\t\tp = network[j];\r\n\t\t\t\tdist = g - p[1]; /* inx key - reverse dif */\r\n\r\n\t\t\t\tif (dist >= bestd) j = -1; /* stop iter */\r\n\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\tj--;\r\n\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\tdist += a;\r\n\r\n\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (best);\r\n\t};\r\n\r\n\tvar process = exports.process = function process() {\r\n\t\tlearn();\r\n\t\tunbiasnet();\r\n\t\tinxbuild();\r\n\t\treturn colorMap();\r\n\t};\r\n\r\n\t/*\r\n\t * Unbias network to give byte values 0..255 and record position i to prepare\r\n\t * for sort\r\n\t * -----------------------------------------------------------------------------------\r\n\t */\r\n\r\n\tvar unbiasnet = function unbiasnet() {\r\n\r\n\t\tvar i;\r\n\t\tvar j;\r\n\r\n\t\tfor (i = 0; i < netsize; i++) {\r\n\t\t\tnetwork[i][0] >>= netbiasshift;\r\n\t\t\tnetwork[i][1] >>= netbiasshift;\r\n\t\t\tnetwork[i][2] >>= netbiasshift;\r\n\t\t\tnetwork[i][3] = i; /* record colour no */\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in\r\n\t * radpower[|i-j|]\r\n\t * ---------------------------------------------------------------------------------\r\n\t */\r\n\r\n\tvar alterneigh = function alterneigh(rad, i, b, g, r) {\r\n\r\n\t\tvar j;\r\n\t\tvar k;\r\n\t\tvar lo;\r\n\t\tvar hi;\r\n\t\tvar a;\r\n\t\tvar m;\r\n\t\tvar p;\r\n\r\n\t\tlo = i - rad;\r\n\t\tif (lo < -1) lo = -1;\r\n\r\n\t\thi = i + rad;\r\n\t\tif (hi > netsize) hi = netsize;\r\n\r\n\t\tj = i + 1;\r\n\t\tk = i - 1;\r\n\t\tm = 1;\r\n\r\n\t\twhile ((j < hi) || (k > lo)) {\r\n\t\t\ta = radpower[m++];\r\n\r\n\t\t\tif (j < hi) {\r\n\t\t\t\tp = network[j++];\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\r\n\t\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\r\n\t\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\r\n\t\t\t\t} catch (e) {} // prevents 1.3 miscompilation\r\n\t\t\t}\r\n\r\n\t\t\tif (k > lo) {\r\n\t\t\t\tp = network[k--];\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\r\n\t\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\r\n\t\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t * Move neuron i towards biased (b,g,r) by factor alpha\r\n\t * ----------------------------------------------------\r\n\t */\r\n\r\n\tvar altersingle = function altersingle(alpha, i, b, g, r) {\r\n\r\n\t\t/* alter hit neuron */\r\n\t\tvar n = network[i];\r\n\t\tn[0] -= (alpha * (n[0] - b)) / initalpha;\r\n\t\tn[1] -= (alpha * (n[1] - g)) / initalpha;\r\n\t\tn[2] -= (alpha * (n[2] - r)) / initalpha;\r\n\t};\r\n\r\n\t/*\r\n\t * Search for biased BGR values ----------------------------\r\n\t */\r\n\r\n\tvar contest = function contest(b, g, r) {\r\n\r\n\t\t/* finds closest neuron (min dist) and updates freq */\r\n\t\t/* finds best neuron (min dist-bias) and returns position */\r\n\t\t/* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\r\n\t\t/* bias[i] = gamma*((1/netsize)-freq[i]) */\r\n\r\n\t\tvar i;\r\n\t\tvar dist;\r\n\t\tvar a;\r\n\t\tvar biasdist;\r\n\t\tvar betafreq;\r\n\t\tvar bestpos;\r\n\t\tvar bestbiaspos;\r\n\t\tvar bestd;\r\n\t\tvar bestbiasd;\r\n\t\tvar n;\r\n\r\n\t\tbestd = ~ (1 << 31);\r\n\t\tbestbiasd = bestd;\r\n\t\tbestpos = -1;\r\n\t\tbestbiaspos = bestpos;\r\n\r\n\t\tfor (i = 0; i < netsize; i++) {\r\n\t\t\tn = network[i];\r\n\t\t\tdist = n[0] - b;\r\n\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\ta = n[1] - g;\r\n\t\t\tif (a < 0) a = -a;\r\n\t\t\tdist += a;\r\n\t\t\ta = n[2] - r;\r\n\t\t\tif (a < 0) a = -a;\r\n\t\t\tdist += a;\r\n\r\n\t\t\tif (dist < bestd) {\r\n\t\t\t\tbestd = dist;\r\n\t\t\t\tbestpos = i;\r\n\t\t\t}\r\n\r\n\t\t\tbiasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\r\n\r\n\t\t\tif (biasdist < bestbiasd) {\r\n\t\t\t\tbestbiasd = biasdist;\r\n\t\t\t\tbestbiaspos = i;\r\n\t\t\t}\r\n\r\n\t\t\tbetafreq = (freq[i] >> betashift);\r\n\t\t\tfreq[i] -= betafreq;\r\n\t\t\tbias[i] += (betafreq << gammashift);\r\n\t\t}\r\n\r\n\t\tfreq[bestpos] += beta;\r\n\t\tbias[bestpos] -= betagamma;\r\n\t\treturn (bestbiaspos);\r\n\t};\r\n\r\n\tNeuQuant.apply(this, arguments);\r\n\treturn exports;\r\n};\r\n"],"sourceRoot":""}